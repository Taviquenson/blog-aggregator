The psql connection string template:
protocol://username:password@host:port/database

The psql connection string:
"postgres://tavo:@localhost:5432/gator"
Which can be tested/used as such:
psql "postgres://tavo:@localhost:5432/gator"

To run the postgres Up migration using cli tool goose, go into directory sql/schema and do:
goose postgres "postgres://tavo:@localhost:5432/gator" up
(based on this template: goose postgres <connection_string> up)

You can check if the Up migration worked by running:
psql <database_name>
\dt

Add the connection string to the .gatorconfig.json
However, here in the config file it needs an additional sslmode=disable query string:
protocol://username:password@host:port/database?sslmode=disable
Your application code needs to know to not try to use SSL locally.




--------sqlc - A cli that generates type-safe Go code from SQL queries-------
After creating a .sql file in sql/queries for the respective table, and writing
a new SQL query in it, call `sqlc generate` to get the go code for it.

--------------------------------------------------------------------------------




======= Another way to do the sql/queries/feed_follows.sql initial file =========
-- name: CreateFeedFollow :one
WITH inserted_feed_follow AS (
    INSERT INTO feed_follows (id, created_at, updated_at, user_id, feed_id)
    VALUES ($1, $2, $3, $4, $5)
    RETURNING *
)
SELECT
    inserted_feed_follow.*,
    feeds.name AS feed_name,
    users.name AS user_name
FROM inserted_feed_follow
INNER JOIN feeds ON inserted_feed_follow.feed_id = feeds.id
INNER JOIN users ON inserted_feed_follow.user_id = users.id;
--

-- name: GetFeedFollowsForUser :many
SELECT feed_follows.*, feeds.name AS feed_name, users.name AS user_name
FROM feed_follows
INNER JOIN feeds ON feed_follows.feed_id = feeds.id
INNER JOIN users ON feed_follows.user_id = users.id
WHERE feed_follows.user_id = $1;
--

==================================================================================